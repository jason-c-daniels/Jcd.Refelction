<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Reflection</name>
    </assembly>
    <members>
        <member name="T:Jcd.Reflection.FieldOrPropertyEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Jcd.Reflection.FieldOrPropertyEnumerator.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyEnumerator.EnumerationSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyEnumerator.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.#ctor(System.Type,Jcd.Reflection.FieldOrPropertyEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.#ctor(System.Object,Jcd.Reflection.FieldOrPropertyEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jcd.Reflection.FieldOrPropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.#ctor(System.Reflection.MemberInfo,System.Reflection.BindingFlags)">
            <summary>
            
            </summary>
            <param name="memberInfo"></param>
            <param name="flags"></param>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.DeclaringType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.MemberType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.ReflectedType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            
            </summary>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetValue(System.Object,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="errored"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="errored"></param>
        </member>
        <member name="T:Jcd.Reflection.MemberInfoEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Jcd.Reflection.MemberInfoEnumerator.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MemberInfoEnumerator.SkipSystemMembers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MemberInfoEnumerator.EnumerationSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MemberInfoEnumerator.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.#ctor(System.Type,Jcd.Reflection.MemberInfoEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.#ctor(System.Object,Jcd.Reflection.MemberInfoEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean},Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="methodInfo">the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="methodInfo"></param>
            <param name="params"></param>
            <typeparam name="TOut"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="params"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Type,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <param name="params"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="params"></param>
            <typeparam name="TOut"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Type,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <param name="params"></param>
            <typeparam name="TOut"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Jcd.Reflection.MethodInfoEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Jcd.Reflection.MethodInfoEnumerator.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MethodInfoEnumerator.EnumerationSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MethodInfoEnumerator.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.#ctor(System.Type,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.#ctor(System.Object,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jcd.Reflection.NumericExtensions">
            <summary>
               An extension method class providing numeric type information detection.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsBigIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsDecimalType(System.Object)">
            <summary>
               Indicates if an object is of a decimal data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a decimal data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsFloatType(System.Object)">
            <summary>
               Indicates if an object is of a floating point data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a floating point data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsNumericType(System.Object)">
            <summary>
               Indicates if an object is of a numeric data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a numeric data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsSignedType(System.Object)">
            <summary>
               Indicates if an object is of a signed data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a signed data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsUnsignedType(System.Object)">
            <summary>
               Indicates if an object is of an unsigned data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an unsigned data type</returns>
        </member>
        <member name="T:Jcd.Reflection.ReflectionExtensions">
            <summary>
            A set of reflection extensions. These will be split out into separate classes in the near future.
            But their extension method invocation signatures will remain unchanged. 
            </summary>
        </member>
        <member name="F:Jcd.Reflection.ReflectionExtensions.BuiltInNonPrimitiveScalars">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.EnumerateProperties(System.Type,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="flags"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.EnumerateProperties(System.Object,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="flags"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToPropertyInfoValuePairs(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="item"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToNameValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.EnumerateFields(System.Type,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="flags"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.EnumerateFields(System.Object,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="flags"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToFieldInfoValuePairs(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.Object,System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="item"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToNameValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.FieldInfo,System.Object}})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.IsScalar(System.Object,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="nonPrimitiveScalars"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.IsScalar(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="nonPrimitiveScalars"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.IsKeyValuePair(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.GetValue(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="fieldOrPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.SetValue(System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="fieldOrPropertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToDictionaryTree(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToExpandoObject(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.DefaultExpandoKeyRenamingStrategy(System.String)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.DefaultExpandoValueRetentionStrategy(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.ToDictionaryTree``1(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <typeparam name="TNode"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.AppendDictionary``1(System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},System.Collections.IDictionary,``0)">
            <summary>
            
            </summary>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="dictionary1"></param>
            <param name="root"></param>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.AppendObject``1(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},``0)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="root"></param>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.AppendEnumerable``1(System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},System.Collections.IEnumerable,``0,System.Object@)">
            <summary>
            
            </summary>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="enumerable"></param>
            <param name="root"></param>
            <param name="array"></param>
            <typeparam name="TNode"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.BuildName(System.String,System.Text.StringBuilder,System.Char)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="sb"></param>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ReflectionExtensions.Append``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <typeparam name="TNode"></typeparam>
        </member>
    </members>
</doc>
