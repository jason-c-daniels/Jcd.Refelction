<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Reflection</name>
    </assembly>
    <members>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean},Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="methodInfo">the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="T:Jcd.Reflection.NumericExtensions">
            <summary>
               An extension method class providing numeric type information detection.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsBigIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsDecimalType(System.Object)">
            <summary>
               Indicates if an object is of a decimal data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a decimal data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsFloatType(System.Object)">
            <summary>
               Indicates if an object is of a floating point data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a floating point data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsNumericType(System.Object)">
            <summary>
               Indicates if an object is of a numeric data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a numeric data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsSignedType(System.Object)">
            <summary>
               Indicates if an object is of a signed data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a signed data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsUnsignedType(System.Object)">
            <summary>
               Indicates if an object is of an unsigned data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an unsigned data type</returns>
        </member>
    </members>
</doc>
