<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Reflection</name>
    </assembly>
    <members>
        <member name="T:Jcd.Reflection.ExpandoObjectExtensions">
            <summary>
            Extension methods for creating expando objects from POCOs or string object dictionaries
            </summary>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToDictionaryTree(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            Decomposes an object graph into a string-object dictionary tree. Cycles are not preserved.
            </summary>
            <param name="self">The object to decompose</param>
            <param name="visited">A hashset of visited objects</param>
            <param name="keyRenamingStrategy">A function to rename a key when it's deemed necessary</param>
            <param name="valueRetentionStrategy">a function to determine if a value is to be retained</param>
            <returns>The dictionary</returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToExpandoObject(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            Convert an object into an ExpandoObject, tree, breaking cycles in the object graph. 
            </summary>
            <param name="self">the object to convert</param>
            <param name="visited">A hashset of visited objects</param>
            <param name="keyRenamingStrategy">A function to rename a key when it's deemed necessary</param>
            <param name="valueRetentionStrategy">a function to determine if a value is to be retained</param>
            <returns>The ExpandoObject</returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.DefaultExpandoKeyRenamingStrategy(System.String)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.DefaultExpandoValueRetentionStrategy(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToDictionaryTree``1(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <typeparam name="TNode"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.AppendDictionary``1(System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},System.Collections.IDictionary,``0)">
            <summary>
            
            </summary>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="dictionary1"></param>
            <param name="root"></param>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.AppendObject``1(System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},``0)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="root"></param>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.AppendEnumerable``1(System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean},System.Collections.IEnumerable,``0,System.Object@)">
            <summary>
            
            </summary>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <param name="enumerable"></param>
            <param name="root"></param>
            <param name="array"></param>
            <typeparam name="TNode"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.BuildName(System.String,System.Text.StringBuilder,System.Char)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="sb"></param>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.Append``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.HashSet{System.Object},System.Func{System.String,System.String},System.Func{System.String,System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="visited"></param>
            <param name="keyRenamingStrategy"></param>
            <param name="valueRetentionStrategy"></param>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToPropertyInfoValuePairs(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Creates a set of PropertyInfo to (current) value pairs for a given object. 
            </summary>
            <param name="items"></param>
            <param name="item"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToNameValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            For a set of PropertyInfo to object pairs return a name to value pair. 
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToFieldInfoValuePairs(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.Object,System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="item"></param>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.ToNameValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.FieldInfo,System.Object}})">
            <summary>
            Creates a set of FieldInfo to (current) value pairs for a given object. 
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.ExpandoObjectExtensions.IsKeyValuePair(System.Type)">
            <summary>
            Determines if a type is a KeyValuePair 
            </summary>
            <param name="type">the type to interrogate</param>
            <returns>true if it is (via duck typing)</returns>
        </member>
        <member name="T:Jcd.Reflection.FieldInfoExtensions">
            <summary>
            Extension methods to aid in reflecting on fields.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldInfoExtensions.EnumerateFields(System.Type,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Enumerate the FieldInfo entries for a given type 
            </summary>
            <param name="type">The data type to reflect on</param>
            <param name="flags">The BindingFlags</param>
            <param name="skip">a predicate for skipping certain entries (e.g. System...)</param>
            <returns>An enumerable across FieldInfo s</returns>
        </member>
        <member name="M:Jcd.Reflection.FieldInfoExtensions.EnumerateFields(System.Object,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Enumerate the FieldInfo entries for a given instance 
            </summary>
            <param name="self">The data instance to reflect on</param>
            <param name="flags">The BindingFlags</param>
            <param name="skip">a predicate for skipping certain entries (e.g. System...)</param>
            <returns>An enumerable across FieldInfo s</returns>
        </member>
        <member name="T:Jcd.Reflection.FieldOrPropertyEnumerator">
            <summary>
            Enumerates both properties and fields on a given data type.
            </summary>
        </member>
        <member name="T:Jcd.Reflection.FieldOrPropertyEnumerator.Settings">
            <summary>
            The settings indicating "how" to enumerate. (i.e. BindingFlags and a predicate for skipping members)
            </summary>
        </member>
        <member name="F:Jcd.Reflection.FieldOrPropertyEnumerator.Settings.Flags">
            <summary>
            The BindingFlags for the member lookup.
            </summary>
        </member>
        <member name="F:Jcd.Reflection.FieldOrPropertyEnumerator.Settings.Skip">
            <summary>
            A predicate for skipping certain members.
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyEnumerator.EnumerationSettings">
            <summary>
            Gets or sets the settings that control enumeration. 
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyEnumerator.Type">
            <summary>
            The data type being reflected on. 
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.#ctor(System.Type,Jcd.Reflection.FieldOrPropertyEnumerator.Settings)">
            <summary>
            Constructs a FieldOrPropertyEnumerator from a type and settings.
            </summary>
            <param name="type">The data type to reflect on</param>
            <param name="settings">the settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.#ctor(System.Object,Jcd.Reflection.FieldOrPropertyEnumerator.Settings)">
            <summary>
            Constructs a FieldOrPropertyEnumerator from an object instance and settings.
            </summary>
            <param name="item">The object instance to reflect on</param>
            <param name="settings">the settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.GetEnumerator">
            <summary>
            Enumerates the FieldOrPropertyInfo entries for the given type.
            </summary>
            <returns>An enumerator of FieldOrPropertyInfo's</returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the FieldOrPropertyInfo entries for the given type.
            </summary>
            <returns>An enumerator for the FieldOrPropertyInfo's</returns>
        </member>
        <member name="T:Jcd.Reflection.FieldOrPropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.#ctor(System.Reflection.MemberInfo,System.Reflection.BindingFlags)">
            <summary>
            A dual purpose MemberInfo type.
            </summary>
            <param name="memberInfo">The member info on which this instance is based.</param>
            <param name="flags">the binding flags</param>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.DeclaringType">
            <summary>
            Gets the type that declares the member.   
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.MemberType">
            <summary>
            Gets the type of the member
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.Name">
            <summary>
            Gets the name of the member
            </summary>
        </member>
        <member name="P:Jcd.Reflection.FieldOrPropertyInfo.ReflectedType">
            <summary>
            gets the reflected type of the member.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Gets custom attributes for the member.
            </summary>
            <param name="inherit">Get inherited attributes if true</param>
            <returns>an array of custom attributes</returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets custom attributes of a specified type for a member.
            </summary>
            <param name="attributeType">The data type for the custom attribute</param>
            <param name="inherit">Get inherited attributes if true</param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            Checks if a custom attribute of the specified type exists for the member. 
            </summary>
            <param name="attributeType">The data type for the custom attribute</param>
            <param name="inherit">Checks inheritance tree if true</param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the object. 
            </summary>
            <param name="obj">the object to get the value from</param>
            <returns>the retrieved value</returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.GetValue(System.Object,System.Boolean@)">
            <summary>
            Gets a value from an object, and indicates if an error occurred during that process. 
            </summary>
            <param name="obj">the object to get the value from</param>
            <param name="errored">true if an exception occurred during the get.</param>
            <returns>The value retrieved</returns>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value on an object. 
            </summary>
            <param name="obj">The object to manipulate</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Jcd.Reflection.FieldOrPropertyInfo.SetValue(System.Object,System.Object,System.Boolean@)">
            <summary>
            Sets a value on an object. 
            </summary>
            <param name="obj">The object to manipulate</param>
            <param name="value">The value to set.</param>
            <param name="errored">true if an exception occurred during the set.</param>
        </member>
        <member name="T:Jcd.Reflection.MemberInfoEnumerator">
            <summary>
            Enumerated MemberInfos for a given object or type.
            </summary>
        </member>
        <member name="T:Jcd.Reflection.MemberInfoEnumerator.Settings">
            <summary>
            The settings controlling how to enumerate (e.g. what binding flags to use, special predicate for skipping?)
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MemberInfoEnumerator.Settings.Flags">
            <summary>
            The BindingFlags for the member lookup.
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MemberInfoEnumerator.Settings.Skip">
            <summary>
            A predicate for skipping certain members.
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MemberInfoEnumerator.SkipSystemMembers">
            <summary>
            Predefined skip predicate for skipping system members.  
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MemberInfoEnumerator.SkipSystemAndNonDataMembers">
            <summary>
            Predefined skip predicate for skipping system members.  
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MemberInfoEnumerator.EnumerationSettings">
            <summary>
            Gets or sets the settings controlling member info enumeration
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MemberInfoEnumerator.Type">
            <summary>
            The type whose members are enumerated.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.#ctor(System.Type,Jcd.Reflection.MemberInfoEnumerator.Settings)">
            <summary>
            Constructs a MemberInfoEnumerator from a type and settings.
            </summary>
            <param name="type">The type to enumerate</param>
            <param name="settings">The settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.#ctor(System.Object,Jcd.Reflection.MemberInfoEnumerator.Settings)">
            <summary>
            Constructs a MemberInfoEnumerator from an instance and settings.
            </summary>
            <param name="item">The instance to enumerate</param>
            <param name="settings">The settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator 
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Jcd.Reflection.MemberInfoEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="T:Jcd.Reflection.MethodExtensions">
            <summary>
            Extension methods to help invoke methods via reflection.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Finds the first method by the provided name and returns its MethodInfo
            </summary>
            <param name="self"></param>
            <param name="name"></param>
            <param name="settings"></param>
            <returns>null if none found</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Type,System.String)">
            <summary>
            Gets a methodInfo by name from a type. 
            </summary>
            <param name="type">the type to interrogate</param>
            <param name="name">the name of the method</param>
            <returns>the result of the call, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.GetMethod(System.Type,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Gets a methodInfo by name from a type. 
            </summary>
            <param name="type">the type to interrogate</param>
            <param name="name">the name of the method</param>
            <param name="settings"></param>
            <returns>the result of the call, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.FilterMethods(System.Object,System.Func{System.Reflection.MethodInfo,System.Boolean},Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Given a filter return an array of matching MethodInfo's
            </summary>
            <param name="self"></param>
            <param name="filter"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="methodInfo">the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="methodInfo"></param>
            <param name="params"></param>
            <typeparam name="TOut"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="settings">binding flags and skip predicate</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the method on the specified object using the provided parameters
            </summary>
            <param name="self">The instance to invoke the method on</param>
            <param name="name">the name of the method to invoke</param>
            <param name="params">the params for the method</param>
            <returns>the result, if any</returns>
            <typeparam name="TOut">result type</typeparam>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static method on a type 
            </summary>
            <param name="type">The type containing the static method</param>
            <param name="name">The name of the method</param>
            <param name="params">The params to pass</param>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke(System.Type,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invokes a static method on a type 
            </summary>
            <param name="type">The type containing the static method</param>
            <param name="name">The name of the method</param>
            <param name="params">The params to pass</param>
            <param name="settings">Thee settings such as BindingFlags</param>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static method on a type, coercing the return type 
            </summary>
            <param name="type">The type containing the static method</param>
            <param name="name">The name of the method</param>
            <param name="params">The params to pass</param>
            <typeparam name="TOut">The type of the return</typeparam>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodExtensions.Invoke``1(System.Type,System.String,Jcd.Reflection.MethodInfoEnumerator.Settings,System.Object[])">
            <summary>
            Invokes a static method on a type, coercing the return type 
            </summary>
            <param name="type">The type containing the static method</param>
            <param name="name">The name of the method</param>
            <param name="params">The params to pass</param>
            <param name="settings">The settings such as binding flags</param>
            <typeparam name="TOut">The type of the return</typeparam>
            <returns>The result of the call, if any</returns>
        </member>
        <member name="T:Jcd.Reflection.MethodInfoEnumerator">
            <summary>
            Enumerates the method information for a given type. 
            </summary>
        </member>
        <member name="T:Jcd.Reflection.MethodInfoEnumerator.Settings">
            <summary>
            The settings controlling how to enumerate (e.g. what binding flags to use, special predicate for skipping?)
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MethodInfoEnumerator.Settings.Flags">
            <summary>
            The BindingFlags for the member lookup.
            </summary>
        </member>
        <member name="F:Jcd.Reflection.MethodInfoEnumerator.Settings.Skip">
            <summary>
            A predicate for skipping certain members.
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MethodInfoEnumerator.EnumerationSettings">
            <summary>
            Gets or sets the settings controlling method info enumeration
            </summary>
        </member>
        <member name="P:Jcd.Reflection.MethodInfoEnumerator.Type">
            <summary>
            The type whose methods are enumerated.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.#ctor(System.Type,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Constructs a MethodInfoEnumerator from a type and settings.
            </summary>
            <param name="type">The type to enumerate</param>
            <param name="settings">The settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.#ctor(System.Object,Jcd.Reflection.MethodInfoEnumerator.Settings)">
            <summary>
            Constructs a MethodInfoEnumerator from an instance and settings.
            </summary>
            <param name="item">The instance to enumerate</param>
            <param name="settings">The settings controlling enumeration</param>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for the MethodInfos enumerated
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:Jcd.Reflection.MethodInfoEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the MethodInfos enumerated
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="T:Jcd.Reflection.NumericExtensions">
            <summary>
               An extension method class providing numeric type information detection.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsBigIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsDecimalType(System.Object)">
            <summary>
               Indicates if an object is of a decimal data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a decimal data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsFloatType(System.Object)">
            <summary>
               Indicates if an object is of a floating point data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a floating point data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsIntegerType(System.Object)">
            <summary>
               Indicates if an object is of an integer data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an integer data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsNumericType(System.Object)">
            <summary>
               Indicates if an object is of a numeric data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a numeric data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsSignedType(System.Object)">
            <summary>
               Indicates if an object is of a signed data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of a signed data type</returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsUnsignedType(System.Object)">
            <summary>
               Indicates if an object is of an unsigned data type.
            </summary>
            <param name="self">The object to check</param>
            <returns>true if the object is of an unsigned data type</returns>
        </member>
        <member name="F:Jcd.Reflection.NumericExtensions.BuiltInNonPrimitiveScalars">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsScalar(System.Object,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="nonPrimitiveScalars"></param>
            <returns></returns>
        </member>
        <member name="M:Jcd.Reflection.NumericExtensions.IsScalar(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="nonPrimitiveScalars"></param>
            <returns></returns>
        </member>
        <member name="T:Jcd.Reflection.PropertyInfoExtensions">
            <summary>
            A set of reflection extensions to aid in manipulating properties.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.PropertyInfoExtensions.EnumerateProperties(System.Type,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Enumerate the PropertyInfo entries for a given type 
            </summary>
            <param name="type">The data type to reflect on</param>
            <param name="flags">The BindingFlags</param>
            <param name="skip">a predicate for skipping certain entries (e.g. System...)</param>
            <returns>An enumerable across PropertyInfo s</returns>
        </member>
        <member name="M:Jcd.Reflection.PropertyInfoExtensions.EnumerateProperties(System.Object,System.Nullable{System.Reflection.BindingFlags},System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Enumerate the PropertyInfo entries for a given type 
            </summary>
            <param name="self">The data instance to reflect on</param>
            <param name="flags">The BindingFlags</param>
            <param name="skip">a predicate for skipping certain entries (e.g. System...)</param>
            <returns>An enumerable across PropertyInfo s</returns>
        </member>
        <member name="T:Jcd.Reflection.ValueExtensions">
            <summary>
            GetValue and SetValue implementations.
            </summary>
        </member>
        <member name="M:Jcd.Reflection.ValueExtensions.GetValue(System.Object,System.String)">
            <summary>
            Gets a value from a named field or property
            </summary>
            <param name="self">the instance to retrieve the vale from</param>
            <param name="fieldOrPropertyName">the name of the item to get.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Jcd.Reflection.ValueExtensions.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a value on a field or property 
            </summary>
            <param name="self">The instance to set the value on</param>
            <param name="fieldOrPropertyName">the name of the field or property to set</param>
            <param name="value">The value to set.</param>
        </member>
    </members>
</doc>
